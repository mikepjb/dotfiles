#!/usr/bin/env bash

set -euo pipefail

# Define Go tools and their install paths
declare -A GO_TOOLS=(
    ["gocyclo"]="github.com/fzipp/gocyclo/cmd/gocyclo@latest"
    ["golines"]="github.com/segmentio/golines@latest"
)

install_missing_tools() {
    for tool in "${!GO_TOOLS[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            echo "Installing $tool..."
            go install "${GO_TOOLS[$tool]}"
        fi
    done
}

analyze_code() {
    echo "=== Code Statistics ==="
    echo "Go files:"
    find . -type f -name "*.go" ! -path "*/node_modules/*" -exec wc -l {} + | sort -nr
    
    echo -e "\nHTML files:"
    find . -type f -name "*.html" ! -path "*/node_modules/*" -exec wc -l {} + | sort -nr
    
    echo -e "\nTemplate files:"
    find . -type f -name "*.tmpl" ! -path "*/node_modules/*" -exec wc -l {} + | sort -nr
    
    echo -e "\nTS files:"
    find . -type f -name "*.ts" ! -path "*node_modules*" -exec wc -l {} + | sort -nr

    echo -e "\nTSX files:"
    find . -type f -name "*.tsx" ! -path "*node_modules*" -exec wc -l {} + | sort -nr

    echo -e "\nCSS files:"
    find . -type f -name "*.css" ! -path "*node_modules*" -exec wc -l {} + | sort -nr
}

analyze_go() {
    echo -e "\n=== Go Analysis ==="
    echo "Cyclomatic complexity (top 10):"
    echo "1 - 10: Simple procedure, little risk. 11 - 20: More complex, moderate risk. 21+: Complex, high risk."
    gocyclo -top 10 .
    
    echo -e "\nFiles with long lines:"
    golines -l .
    
    echo -e "\nFiles needing formatting:"
    gofmt -l .
}

analyze_htmx() {
    echo -e "\n=== HTMX Usage ==="
    local attrs=("hx-get" "hx-post" "hx-put" "hx-delete" "hx-patch" "hx-swap" "hx-trigger" "hx-target")
    
    for attr in "${attrs[@]}"; do
        count=$(grep -r "$attr" . --include="*.html" --include="*.tmpl" 2>/dev/null | wc -l)
        echo "$attr: $count usages"
    done
}

analyze_git() {
    echo -e "\n=== Git Statistics (last 6 months) ==="
    echo "Top contributors:"
    git log --since="6 months ago" --pretty=format:"%an" | sort | uniq -c | sort -rn
    
    echo -e "\nMost changed files:"
    git log --since="6 months ago" --name-only --pretty=format: | sort | uniq -c | sort -rn | head -10
}

main() {
    install_missing_tools
    analyze_code
    analyze_go
    analyze_htmx
    analyze_git
}

main "$@"
