#!/usr/bin/env bash

# stats - A script to display file statistics in a table format

# Function to create a divider line
create_divider() {
  local width=$1
  printf '+%s+%s+%s+%s+\n' "$(printf -- '-%.0s' $(seq 1 22))" "$(printf -- '-%.0s' $(seq 1 15))" "$(printf -- '-%.0s' $(seq 1 15))" "$(printf -- '-%.0s' $(seq 1 15))"
}

# Function to print a row with proper formatting
print_row() {
  printf "| %-20s | %13s | %13s | %13s |\n" "$1" "$2" "$3" "$4"
}

# Print table header
create_divider
print_row "File Type" "Files" "Total Lines" "Lines/File"
create_divider

# Loop through file extensions and gather stats
for ext in go "html/tmpl" "js(x)/ts(x)" css; do
  # Find files matching the extension pattern
  if [[ "$ext" == "html/tmpl" ]]; then
    # Special case for HTML and template files
    files=$(find . -type f \( -name "*.html" -o -name "*.tmpl" \) | wc -l)
    lines=$(find . -type f \( -name "*.html" -o -name "*.tmpl" \) -exec cat {} \; | wc -l)
  elif [[ "$ext" == "js(x)/ts(x)" ]]; then
    # Special case for JS/TS and JSX/TSX files
    files=$(find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" \) | wc -l)
    lines=$(find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" \) -exec cat {} \; | wc -l)
  else
    # Normal case for single extension
    files=$(find . -type f -name "*.$ext" | wc -l)
    lines=$(find . -type f -name "*.$ext" -exec cat {} \; | wc -l)
  fi
  
  # Calculate average lines per file
  if (( files > 0 )); then
    avg=$(( lines / files ))
  else
    avg=0
  fi
  
  # Print the row
  print_row "$ext" "$files" "$lines" "$avg"
done

# Print table footer
create_divider
